---
- name: NIM check for client OS level
  ibm.power_aix.nim:
    action: check
    targets: "{{ nim_alt_disk_migration_nim_client }}"
  register: nim_check
- ansible.builtin.debug:
    var: nim_check.nim_node.standalone[nim_alt_disk_migration_nim_client]
- name: Parse OS level
  ansible.builtin.set_fact:
    full_client_oslevel: >
      `{{ [nim_alt_disk_migration_nim_client] | map('extract', nim_check.nim_node.standalone) |
      map(attribute='oslevel') | list | join('\n') }}`
    client_oslevel: >
      `{{ [nim_alt_disk_migration_nim_client] | map('extract', nim_check.nim_node.standalone) |
      map(attribute='oslevel') | list | join('\n') | regex_search('[0-9]+') }}`

############################################################
# NOTE: when receiving a value of 'timedout' for the oslevel
# of the nim client, then the NIM master/client setup might
# not be complete. Make sure to register the NIM client
# properly to the NIM master
# You can check the /etc/niminfo file on the NIM cient to
# see which NIM master it is registered to.
############################################################
- name: Determine if OS level was successfully fetched
  ansible.builtin.fail:
    msg: OS level not successfully fetched, make sure NIM master/client is properly setup
  when: full_client_oslevel == "timedout"

############################################################
# NOTE: The parsed OS level from the previous task will be
# compared to 7100 to check if the client OS level
# is lower than 7.1
############################################################
- name: Fail if OS level is less than 7.1
  ansible.builtin.fail:
    msg: Client LPAR must be AIX 7.1 or higher.
  when: client_oslevel < "7100"
- ansible.builtin.debug:
    msg: Client LPAR '{{ nim_alt_disk_migration_nim_client }}' is at AIX level '{{ full_client_oslevel }}'

# Copyright (c) IBM Corporation 2020
---
#############################################################
#############################################################

- name: Fail if a NIM LPP resource is not specified
  ansible.builtin.fail:
    msg: NIM LPP resource not specified
  when: nim_alt_disk_migration_lpp_source == ""  # noqa empty-string-compare
- ansible.builtin.debug:
    msg: '"LPP resource {{ nim_alt_disk_migration_lpp_source }} specified for migration"'
- name: Check if CacheVG exists '{{ nim_alt_disk_migration_nimadm_cache_vg }}'
  ansible.builtin.shell: |
    set -o pipefail
    lsvg | grep {{ nim_alt_disk_migration_nimadm_cache_vg }}
  register: reg_nim_alt_disk_migration_nimadm_cache_vg_valid
  changed_when: false
  failed_when: reg_nim_alt_disk_migration_nimadm_cache_vg_valid.rc == 2
  when: nim_alt_disk_migration_nimadm_cache_vg | default("N/A") != "N/A"

- name: Check for out of range in '{{ nim_alt_disk_migration_nimadm_phases_to_run }}'
  ansible.builtin.fail:
    msg: "{{ nim_alt_disk_migration_nimadm_phases_to_run }} contains alpha numeric charcaters, exiting"
  when: >
    nim_alt_disk_migration_nimadm_phases_to_run is defined and
    nim_alt_disk_migration_nimadm_phases_to_run is not regex("\b([1-9]|1[0-2])\b")

#############################################################
#############################################################

- name: Perform resources validations (if nim_alt_disk_migration_control_phases.validate_nim_resources)
  when: >
    nim_alt_disk_migration_control_phases is defined and
    nim_alt_disk_migration_control_phases.validate_nim_resources is defined and
    nim_alt_disk_migration_control_phases.validate_nim_resources


  block:
    - name: Retrieve AIX release level {{ nim_alt_disk_migration_lpp_source }}
      ansible.builtin.include_tasks: retrieve_lpp_source_os_level.yml
    - name: Verify if alt_disk_install.rte fileset is present
      ansible.builtin.include_tasks: validate_alt_disk_install_fileset.yml
    - ansible.builtin.debug:
        msg: '"Fileset alt_disk_install.rte presence validation passed"'
    - name: Create SPOT resource if not specified
      ansible.builtin.include_tasks: create_spot.yml
      when: nim_alt_disk_migration_spot == ""  # noqa empty-string-compare
    - ansible.builtin.debug:
        msg: '"SPOT resource {{ nim_alt_disk_migration_spot }} specified for migration"'
    - ansible.builtin.debug:
        msg: '" Resources {{ nim_alt_disk_migration_lpp_source and nim_alt_disk_migration_spot }} are valid and ready."'
    - name: Confirm eFix bundle resource defined '{{ nim_alt_disk_migration_nimadm_bundle }}'
      ansible.builtin.command: nim -o showres {{ nim_alt_disk_migration_nimadm_bundle }}
      changed_when: false
      register: reg_bundle
      failed_when:
        - reg_bundle.rc != 0
        - reg_bundle.stderr != ''
      when: nim_alt_disk_migration_nimadm_bundle | default("N/A") != "N/A"

    - name: Confirm Pre-migration script resource defined '{{ nim_alt_disk_migration_nimadm_premig_script }}'
      ansible.builtin.command: nim -o showres {{ nim_alt_disk_migration_nimadm_premig_script }}
      changed_when: false
      register: reg_premig_script
      failed_when:
        - reg_premig_script.rc != 0
        - reg_premig_script.stderr != ''
      when: nim_alt_disk_migration_nimadm_premig_script | default("N/A") != "N/A"

    - name: Confirm Post-migration script resource defined '{{ nim_alt_disk_migration_nimadm_postmig_script }}'
      ansible.builtin.command: nim -o showres {{ nim_alt_disk_migration_nimadm_postmig_script }}
      changed_when: false
      register: reg_postmig_script
      failed_when:
        - reg_postmig_script.rc != 0
        - reg_postmig_script.stderr != ''
      when: nim_alt_disk_migration_nimadm_postmig_script | default("N/A") != "N/A"

#  when: nim_alt_disk_migration_control_phases.validate_nim_resources
- name: Perform migration if nim_alt_disk_migration_control_phases.perform_migration
  when: >
    nim_alt_disk_migration_control_phases is defined and
    nim_alt_disk_migration_control_phases.perform_migration is defined and
    nim_alt_disk_migration_control_phases.perform_migration

  # Print a summary of what was executed.

  block:
    #############################################################
    #############################################################

    - name: Fail if a NIM client LPAR is not specified
      ansible.builtin.fail:
        msg: NIM client LPAR to be migrated is not specified
      when: nim_alt_disk_migration_nim_client == ""  # noqa empty-string-compare
    - ansible.builtin.debug:
        msg: '"{{ nim_alt_disk_migration_nim_client }} specified to be migrated"'
    - name: Assert if the user does not input at least one nim_alt_disk_migration_target_disk option.
      ansible.builtin.assert:
        fail_msg: >
          Error: nim_alt_disk_migration_target_disk input is required with at least disk_name or disk_size_policy
        that:
          - nim_alt_disk_migration_target_disk is defined
          - nim_alt_disk_migration_target_disk | type_debug == "dict"

    - name: "Fail if the user inputs the nim_alt_disk_migration_target_disk with both: disk_size_policy and disk_name"
      ansible.builtin.fail:  # noqa empty-string-compare
        msg: "Error: nim_alt_disk_migration_target_disk input is required with at least disk_name or disk_size_policy"
      when: >
        nim_alt_disk_migration_target_disk.disk_size_policy is defined and
        nim_alt_disk_migration_target_disk.disk_size_policy != "" and
        nim_alt_disk_migration_target_disk.disk_name is defined and
        nim_alt_disk_migration_target_disk.disk_name != ""

    - name: Fail if both nim_alt_disk_migration_target_disk disk_size_policy and disk_name have no value
      ansible.builtin.fail:  # noqa empty-string-compare
        msg: "Error: nim_alt_disk_migration_target_disk input is required with at least disk_name or disk_size_policy"
      when: >
        nim_alt_disk_migration_target_disk.disk_size_policy is defined and
        nim_alt_disk_migration_target_disk.disk_size_policy == "" and
        nim_alt_disk_migration_target_disk.disk_name is defined and
        nim_alt_disk_migration_target_disk.disk_name == ""

    # #############################################################
    # #############################################################

    - name: Verify NIM master and client connection
      ansible.builtin.include_tasks: validate_nim_connection.yml
    - ansible.builtin.debug:
        msg: '"NIM master and clients connection validation complete"'
    - name: Fetch client oslevel
      ansible.builtin.include_tasks: get_oslevel.yml
    - name: Read bos.mp64 version from nim_info_file_path {{ nim_alt_disk_migration_lpp_source }}
      ansible.builtin.slurp:
        src: "{{ nim_alt_disk_migration_nim_info_file_path }}_{{ nim_alt_disk_migration_lpp_source }}"
      register: output

    - name: Retrieve nim_alt_disk_migration_lpp_source bos.mp64 level
      ansible.builtin.set_fact:
        variable: "{{ output['content'] | b64decode }}"

    #  Example bos.mp64:7300
    - ansible.builtin.set_fact:
        nim_alt_disk_migration_lpp_source_fileset_level: "{{ variable.split(':')[1] }}"
    - ansible.builtin.debug:
        var: nim_alt_disk_migration_lpp_source_fileset_level
    - name: "Determine if we need to migrate {{ nim_alt_disk_migration_nim_client }} "
      when: client_oslevel | int >= nim_alt_disk_migration_lpp_source_fileset_level | int

      ############################################################
      ############################################################

      block:
        - ansible.builtin.debug:
            msg: "{{ nim_alt_disk_migration_nim_client }} is already at {{ nim_alt_disk_migration_lpp_source_fileset_level }} or higher"
        - name: No need to migrate
          ansible.builtin.set_fact:
            nim_alt_disk_migration_no_need_to_migrate: true
    - when: not nim_alt_disk_migration_no_need_to_migrate and (nim_alt_disk_migration_lpp_source_fileset_level | int >= 7300)

      ############################################################
      ############################################################

      block:
        - name: Verify that the client LPAR is at least a Power8 machine
          ansible.builtin.include_tasks: validate_min_power_level.yml
        - ansible.builtin.debug:
            msg: '"{{ nim_alt_disk_migration_nim_client }} has at least a PowerPC_Power8 processor"'
    - ansible.builtin.set_fact:
        nim_alt_disk_migration_target_disk_force: true
      when: nim_alt_disk_migration_target_disk.force is defined and nim_alt_disk_migration_target_disk.force

    - name: Verify and select target disk used for alternate disk migration
      when: not nim_alt_disk_migration_no_need_to_migrate  # nim_select_target_disk block

      #############################################################
      #############################################################

      block:
        - when: nim_alt_disk_migration_target_disk.disk_name is defined and nim_alt_disk_migration_target_disk.disk_name != ""

          block:
            - ibm.power_aix.internal.nim_select_target_disk:
                nim_client: "{{ nim_alt_disk_migration_nim_client }}"
                target_disk: "{{ nim_alt_disk_migration_target_disk.disk_name }}"
                force: "{{ nim_alt_disk_migration_target_disk_force }}"
              register: target_disk_selection

            - ansible.builtin.set_fact:
                client_target_disk: "{{ target_disk_selection.target_disk }}"
                target_disk_valid: "{{ target_disk_selection.valid }}"
                err_msg: "{{ target_disk_selection.msg }}"
        - when: nim_alt_disk_migration_target_disk.disk_size_policy is defined and nim_alt_disk_migration_target_disk.disk_size_policy != ""

          block:
            - ibm.power_aix.internal.nim_select_target_disk:
                nim_client: "{{ nim_alt_disk_migration_nim_client }}"
                target_disk_policy: "{{ nim_alt_disk_migration_target_disk.disk_size_policy }}"
                force: "{{ nim_alt_disk_migration_target_disk_force }}"
              register: target_disk_selection

            - ansible.builtin.set_fact:
                client_target_disk: "{{ target_disk_selection.target_disk }}"
                target_disk_valid: "{{ target_disk_selection.valid }}"
                err_msg: "{{ target_disk_selection.msg }}"
        - ansible.builtin.fail:
            msg: "{{ err_msg }}"
          when: not target_disk_valid

        - ansible.builtin.debug:
            msg: '"{{ client_target_disk }} of {{ nim_alt_disk_migration_nim_client }} will be used to create an alternate disk copy"'
    - name: Clear nimadm_options variable when options are not defined
      ansible.builtin.set_fact:
        nimadm_options: ""
      when:
        - nim_alt_disk_migration_nimadm_cache_vg       | default("N/A") == "N/A"
        - nim_alt_disk_migration_nimadm_bundle         | default("N/A") == "N/A"
        - nim_alt_disk_migration_nimadm_premig_script  | default("N/A") == "N/A"
        - nim_alt_disk_migration_nimadm_postmig_script | default("N/A") == "N/A"
        - nim_alt_disk_migration_nimadm_phases_to_run  | default("N/A") == "N/A"

    ## Add above here
    - name: Add CacheVG to 'nimadm_options' when nim_alt_disk_migration_nimadm_cache_vg configured
      ansible.builtin.set_fact:
        nimadm_options: -j {{ nim_alt_disk_migration_nimadm_cache_vg }}
      when: nim_alt_disk_migration_nimadm_cache_vg | default("N/A")  != "N/A"

    - name: Add eFix Bundle to 'nimadm_options' when nim_alt_disk_migration_nimadm_bundle configured
      ansible.builtin.set_fact:
        nimadm_options: "{{ nimadm_options | default('') }} -b {{ nim_alt_disk_migration_nimadm_bundle }}"
      when: nim_alt_disk_migration_nimadm_bundle | default("N/A")  != "N/A"
    ## Add in here

    - name: Add Pre-migration script to 'nimadm_options'
      ansible.builtin.set_fact:
        nimadm_options: "{{ nimadm_options | default('') }} -a {{ nim_alt_disk_migration_nimadm_premig_script }}"
      when: nim_alt_disk_migration_nimadm_premig_script | default("N/A") != "N/A"

    - name: Add Post-migration script to 'nimadm_options'
      ansible.builtin.set_fact:
        nimadm_options: "{{ nimadm_options | default('') }} -z {{ nim_alt_disk_migration_nimadm_postmig_script }}"
      when: nim_alt_disk_migration_nimadm_postmig_script | default("N/A") != "N/A"

    - name: Add Phases-to-run to 'nimadm_options'
      ansible.builtin.set_fact:
        nimadm_options: "{{ nimadm_options | default('') }} -P{{ nim_alt_disk_migration_nimadm_phases_to_run }}"
      when: nim_alt_disk_migration_nimadm_phases_to_run | default("N/A") != "N/A"

    ############################################################
    # - asynchronous action and polling
    #   large timeout: nimadm takes 2-3 hours to complete
    #   migration in normal case. The timeout (async)
    #   is set up to 4 hours, which is high enough to not
    #   cause "check on it later" task to fail
    #   or no longer exist error.
    #
    #   poll = 0 to start the task and immediately move on
    #   to the next one without waiting a result. The nimadm
    #   task will run until it either complete, fail or timeout.
    ############################################################

    - name: Execute nimadm and wait for migration completion.
      when: not nim_alt_disk_migration_debug_skip_nimadm and not nim_alt_disk_migration_no_need_to_migrate

      # Perform migration block
      # when: nim_alt_disk_migration_control_phases.perform_migration
      block:
        - name: Display nimadm command
          ansible.builtin.debug:
            msg: >
              /usr/sbin/nimadm -c {{ nim_alt_disk_migration_nim_client }} -l {{ nim_alt_disk_migration_lpp_source }}
              -s {{ nim_alt_disk_migration_spot }} {{ nimadm_options }} -Y -d {{ client_target_disk | quote }}

        - name: Migrate to alternate disk  # noqa no-changed-when
          # command: "/usr/sbin/nimadm -c {{ nim_alt_disk_migration_nim_client }} -l {{ lpp_source }} -s {{ spot }} -d {{ client_target_disk }} -Y"
          # command: "/usr/sbin/nimadm -c {{ nim_alt_disk_migration_nim_client }} -l {{ lpp_source }} -s {{ spot }} -Y -d {{ client_target_disk | quote }}"
          ansible.builtin.command: >
            /usr/sbin/nimadm -c {{ nim_alt_disk_migration_nim_client }} -l {{ nim_alt_disk_migration_lpp_source }} -s {{ nim_alt_disk_migration_spot }}
            {{ nimadm_options }} -Y -d {{ client_target_disk | quote }}
          register: results
          async: "{{ nim_alt_disk_migration_wait_nimadm_timeout_secs }}"
          poll: 0
          changed_when: true
        - ansible.builtin.debug:  # var=results
            msg:
              - "timeout = {{ nim_alt_disk_migration_wait_nimadm_timeout_secs }} seconds or {{ nim_alt_disk_migration_wait_nimadm_timeout_hours }} hours "
              - "Maximum retries: {{ nim_alt_disk_migration_retry_chk_nimadm_comp }} of {{ nim_alt_disk_migration_interval }} seconds"
        - ansible.builtin.debug:
            var: results
        - name: "Polling until migration finishes (ignore FAILED RETRING messages) "
          ansible.builtin.async_status:
            jid: "{{ results.ansible_job_id }}"
          register: async_poll_results
          until: async_poll_results.finished
          retries: "{{ nim_alt_disk_migration_retry_chk_nimadm_comp }}"
          delay: "{{ nim_alt_disk_migration_interval }}"
        - ansible.builtin.debug:  # var=async_poll_results
            msg: retry = {{ nim_alt_disk_migration_retry_chk_nimadm_comp }}

        #############################################################
        #############################################################

        - when: nim_alt_disk_migration_reboot_client

          block:
            - name: Rebooting {{ nim_alt_disk_migration_nim_client }}
              ibm.power_aix.nim:
                action: reboot
                targets: "{{ nim_alt_disk_migration_nim_client }}"
              register: results
            - ansible.builtin.debug:
                var: results
        - ansible.builtin.debug:
            msg: >
              'altinst_rootvg' successfully created in '{{ nim_alt_disk_migration_nim_client }}'.
              Reboot '{{ nim_alt_disk_migration_nim_client }}' to boot into the alterate disk.
          when: not nim_alt_disk_migration_reboot_client

        ############################################################
        ############################################################

        - ansible.builtin.debug:
            msg: '"MIGRATION COMPLETE!!!"'
- ansible.builtin.set_fact:
    msg1: ""

- ansible.builtin.set_fact:
    msg1: "- Validation of resources: Completed!"
  when: nim_alt_disk_migration_control_phases.validate_nim_resources

- ansible.builtin.set_fact:
    msg1: >
      "{{ msg1 }} \n- {{ nim_alt_disk_migration_nim_client }} is already at {{ nim_alt_disk_migration_lpp_source_fileset_level }}
      or higher. Skipping migration."
  when: nim_alt_disk_migration_control_phases.perform_migration and not nim_alt_disk_migration_debug_skip_nimadm and nim_alt_disk_migration_no_need_to_migrate

- ansible.builtin.set_fact:
    msg1: >
      " {{ msg1 }} \n- Migration of {{ nim_alt_disk_migration_nim_client }} to {{ nim_alt_disk_migration_lpp_source_fileset_level }}
      Completed."
  when:
    nim_alt_disk_migration_control_phases.perform_migration and
    not nim_alt_disk_migration_debug_skip_nimadm and
    not nim_alt_disk_migration_no_need_to_migrate

- ansible.builtin.set_fact:
    msg1:
      - "{{ msg1 }} \n- Migration of {{ nim_alt_disk_migration_nim_client }} to {{ nim_alt_disk_migration_lpp_source_fileset_level }} NOT Completed"
      - "    Skipping call to nimadm due to nim_alt_disk_migration_debug_skip_nimadm (debug preview action only)"
      - "    /usr/sbin/nimadm -c {{ nim_alt_disk_migration_nim_client }} -l {{ nim_alt_disk_migration_lpp_source }}"
      - " -s {{ nim_alt_disk_migration_spot }} {{ nimadm_options }} -Y -d {{ client_target_disk | quote }}"
  when: nim_alt_disk_migration_debug_skip_nimadm and nim_alt_disk_migration_control_phases.perform_migration and not nim_alt_disk_migration_no_need_to_migrate

- ansible.builtin.debug:
    msg: The role did not perform any actions.
  when: msg1 == ""  # noqa empty-string-compare

- ansible.builtin.debug:
    var: msg1
  when: msg1 != ""  # noqa empty-string-compare

# Copyright (c) IBM Corporation 2021
---

#   Verify the AIX level is 7.3 or above. Bootstrap dnf is only supported in AIX 7.3 and up.
- name: Verify the host is at least aix 7.3, if not, exit host
  raw: "/usr/bin/oslevel  | /usr/bin/awk -F '.' ' { print $1 $2 }'"
  register: output
  changed_when: false

- name: Fail if AIX version < 7.3
  fail:
     msg: "End playbook for {{ aix_host }}. Bootstrap dnf for AIX version \
           {{ output.stdout_lines[0] }} is not supported."
  when: (output.stdout_lines[0] | int) < 73

#   CHECK for DNF on inventory host
- block:

     - name: Check for existence of dnf
       raw: "rpm -q --quiet dnf && echo true || echo false"
       register: dnf_exists
       changed_when: false

     - name: Print if dnf is installed
       debug:
          msg: "Exiting the playbook. dnf is already installed"
       when: dnf_exists.stdout is search("true")

     - name: Check for existence of yum
       raw: "rpm -q --quiet yum && echo true || echo false"
       register: yum_exists
       changed_when: false
       when: dnf_exists.stdout is search("false")

  when: (output.stdout_lines[0] | int) >= 73

# { Excute this block if dnf is not installed and the AIX version is igual or greater than 7.3
- block:

     # DOWNLOAD (local) install images
     - name: Check for rpm_src file on localhost
       stat:
          path: "{{ download_dir }}/{{ rpm_src }}"
       register: rpm_dest
       delegate_to: localhost

     - name: Download latest rpm (installp) fileset to the controller.
       get_url:
          url: "http://public.dhe.ibm.com/aix/freeSoftware/aixtoolbox/INSTALLP/ppc/{{ rpm_src }}"
          dest: "{{ download_dir }}/{{ rpm_src }}"
          mode: '0644'
       delegate_to: localhost

     - name: Check for "{{ dnf_src_71_72 }}" file on localhost
       stat:
          path: "{{ download_dir }}/{{ dnf_src_71_72 }}"
       register: dnf_71_72_dest
       delegate_to: localhost

     - name: Check for "{{ dnf_src_73 }}" file on localhost
       stat:
          path: "{{ download_dir }}/{{ dnf_src_73 }}"
       register: dnf_73_dest
       delegate_to: localhost

     - name: Download dnf bundle file for 7.1 and 7.2 to the controller
       get_url:
          url: "http://public.dhe.ibm.com/aix/freeSoftware/aixtoolbox/ezinstall/ppc/{{ dnf_src_71_72 }}"
          dest: "{{ download_dir }}/{{ dnf_src_71_72 }}"
          mode: '0644'
       when: not dnf_71_72_dest.stat.exists
       delegate_to: localhost

     - name: Download dnf bundle file for 7.3 to the controller
       get_url:
          url: "http://public.dhe.ibm.com/aix/freeSoftware/aixtoolbox/ezinstall/ppc/{{ dnf_src_73 }}"
          dest: "{{ download_dir }}/{{ dnf_src_73 }}"
          mode: '0644'
       when: not dnf_73_dest.stat.exists
       delegate_to: localhost

     - name: Check for dnf script file on localhost
       stat:
          path: "{{ download_dir }}/dnf_aixtoolbox.sh"
       register: script_dest
       delegate_to: localhost

     - name: Copy the installer script from role to local "{{ download_dir }}"
       copy:
          src: "files/dnf_aixtoolbox.sh"
          dest: "{{ download_dir }}/dnf_aixtoolbox.sh"
          mode: '0755'
       delegate_to: localhost

     # DEFINE / EXPAND target path
     - name: Check for target directory
       raw: "test -d {{ target_dir }} && echo true || echo false"
       register: target_exists

     - name: Create target filesystem for image transfer if it does not exist.
       raw: "crfs -v jfs2 -g rootvg -a size=350M -m {{ target_dir }} -A yes -p rw"
       register: crfs_result
       when: target_exists.stdout is search("false")

     - name: Mount target filesystem
       raw: "mount {{ target_dir }}"
       when: crfs_result.rc is defined and crfs_result.rc == 0


     # TRANSFER files to target inventory
     - name: Transfer install images
       raw: >
        scp -p {{ download_dir }}/dnf_aixtoolbox.sh
        {{ download_dir }}/{{ dnf_src_71_72 }}
        {{ download_dir }}/{{ dnf_src_73 }}
        root@{{ aix_host }}:{{ target_dir }}
       register: scp_result
       ignore_errors: true
       delegate_to: localhost

     # EXECUTE restore on target inventory
     # The modified AIX toolsbox script will restore the appropiate bundle if
     # yum is install, it will upgrade it to yum4 which is dnf with yum links and if yum is not there,
     # it will just install dnf.

     - name: Restore dnf bundle to upgrade yum to yum4 if yum is installed.
       raw: "{{ target_dir }}/dnf_aixtoolbox.sh -y {{ target_dir }}"
       ignore_errors: true
       when:
          - scp_result.rc == 0
          - yum_exists.stdout is search("true")

     - name: Restore dnf bundle at the target if yum is not installed.
       raw: "{{ target_dir }}/dnf_aixtoolbox.sh -n {{ target_dir }}"
       ignore_errors: true
       when:
          - scp_result.rc == 0
          - yum_exists.stdout is not search("true")

     - name: Check if dnf was installed at /opt/freeware/bin
       raw: "test -e /opt/freeware/bin/dnf && echo true || echo false"
       register: dnf_installed
       changed_when: false

     - name: Check if yum link was installed at /opt/freeware/bin
       raw: "test -e /opt/freeware/bin/yum && echo true || echo false"
       register: yum_link_installed
       changed_when: false

     # REMOVE temporary filesystem resource
     - name: Remove temporary storage space
       raw: "umount -f {{ target_dir }} && rmfs -r {{ target_dir }}"
       when: crfs_result.rc is defined and crfs_result.rc == 0

     - name: Print status
       debug:
          msg: "Bootstrap attempt of yum upgrade to dnf on {{ aix_host }} has completed"
       when: yum_link_installed.stdout is search("true")

     - name: Print status
       debug:
          msg: "Bootstrap attempt of dnf on {{ aix_host }} has completed"
       when: dnf_installed.stdout is search("true")

#    Block to install dnf }
  when: (output.stdout_lines[0] | int) >= 73 and dnf_exists.stdout is search("false")
